     1                                  ;Calcula el valor aproximado de PI
     2                                  ;Utiliza las series Gregory-Leibniz, para lograrlo.
     3                                  
     4                                  ;Objetivo: Calcular PI
     5                                  ;Entradas: -------
     6                                  ;Salidas: el valor aproximado de PI, con presicion de decimales
     7                                  ;%include "dumpRegs.asm"
     8                                  
     9                                  extern printf
    10                                  
    11                                  section .bss
    12                                  
    13 00000000 <res 00000008>          denominador resq 1
    14 00000008 <res 00000002>          numerador resw 1
    15 0000000A <res 00000008>          PI: resb 8
    16                                  
    17                                  section .data
    18                                  
    19                                  ;PI: dt 0x00
    20                                  ;len: db $-PI
    21                                  section .text
    22                                  	global _start
    23                                  _start:
    24 00000000 66C705[00000000]01-     	mov word [denominador],1
    25 00000008 00                 
    26 00000009 66C705[08000000]04-     	mov word [numerador],4
    27 00000011 00                 
    28 00000012 DF2D[00000000]          	fild qword [denominador]	;carga el nuevo denominador
    29 00000018 DE3D[08000000]          	fidivr word [numerador]		;divide el numerador entre el 
    30                                  									;denominador y lo guarda en el tope actual 
    31                                  									;de la pila
    32 0000001E 31C0                    	xor eax,eax					;Limpia el registro eax para alternar entre
    33                                  									;suma y resta
    34                                  									;0x00 -> resta || 0xFF -> suma
    35 00000020 31C9                    	xor ecx,ecx					;Limpia el ecx para llevar un contador de
    36                                  									;la cantidad de series que se realizan
    37 00000022 31D2                    	xor edx,edx					;Limpia el edx para llevar un contador auxiliar
    38                                  									;de la cantidad de series que se realizan
    39                                  									;para llevar valores
    40                                  	
    41                                  incremento:
    42 00000024 BB[00000000]            	mov ebx,denominador			;copia direccion de denominador en ebx
    43 00000029 830302                  	add dword [ebx],2			;suma 2 al valor de denominador
    44                                  actualizar:	
    45 0000002C DF2D[00000000]          	fild qword [denominador] 	;carga el nuevo denominador
    46 00000032 DE3D[08000000]          	fidivr word [numerador]		;divide el numerador entre el 
    47                                  									;denominador y lo guarda en el tope actual 
    48                                  									;de la pila
    49                                  							
    50 00000038 83F800                  	cmp eax,0x00				;decide si lo que sigue es una suma
    51 0000003B 7509                    	jne suma						;o una resta
    52                                  resta:
    53 0000003D DEE9                    	fsubp ST1,ST0				;resta el valor del tope de la pila y lo 
    54                                  									;almacena en el valor anterior al tope
    55                                  									;y hace un pop a la pila
    56 0000003F 35FF000000              	xor eax,0xFF				;Cambia el valor del eax a 0xFF
    57 00000044 EB08                    	jmp continuar
    58                                  suma:
    59 00000046 DEC1                    	faddp ST1,ST0				;suma el valor del tope de la pila y lo 
    60                                  									;almacena en el valor anterior al tope
    61                                  									;y hace un pop a la pila
    62 00000048 35FF000000              	xor eax,0xFF				;Cambia el valor del eax a 0x00
    63 0000004D 41                      	inc ecx						;Incrementa el contador
    64                                  	
    65                                  continuar:
    66 0000004E 81F980F0FA02            	cmp ecx,50000000
    67                                  	;cmp ecx,16384
    68 00000054 7402                    	je imprimir
    69 00000056 EBCC                    	jmp incremento
    70                                  
    71                                  imprimir:
    72 00000058 68[0A000000]            	push PI
    73 0000005D D915[0A000000]          	fst dword [PI]
    74 00000063 FF35[0E000000]          	push dword [PI+4]
    75 00000069 FF35[0A000000]          	push dword [PI]
    76                                  	
    77 0000006F BA02000000              	mov edx,2
    78 00000074 8B0D[0A000000]          	mov ecx,[PI]
    79                                  	
    80 0000007A BB01000000              	mov ebx,1
    81 0000007F B804000000              	mov eax,4
    82 00000084 CD80                    	int 0x80
    83                                  	
    84                                  pausa:
    85 00000086 BA10000000              	mov edx,16
    86 0000008B B90A000000              	mov ecx,10
    87 00000090 BB01000000              	mov ebx,1
    88 00000095 B804000000              	mov eax,4
    89 0000009A CD80                    	int 0x80
    90                                  
    91                                  salir:
    92 0000009C BB00000000              	mov ebx,0
    93 000000A1 B801000000              	mov eax,1
    94 000000A6 CD80                    	int 0x80
    95                                  	
